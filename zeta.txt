
* Renderização de listas:
- Outro recurso importante é o loop em listas;
- Para isso vamos precisar de uma propriedade com os itens da lista;
- E no template do componente vamos utilizar o *ngFor;
- A sintaxe é: *ngFor="let item of items"
- Desta maneira podemos renderizar template baseado em dados;

** Importância das interfaces:
- Toda entidade que vamos trabalhar precisa de uma interface;
- Isso vai tornar nosso código mais simples ao longo do programa;
- Padronizando ele e facilitando a manutenção;
- Vamos implementar uma interface a nossa lista de animais.
- E fazer um evento que também utilizará este recurso

--> Components can be nested and used inside one another



-- Command to create a component using the Angular CLI
Rua the ng generate component <component-name> command, where
<component-name> is the name of your new component

-- spec.ts file is used to write unitary tests for testing
the components

-- We use a framework like angular in order to generate Dynamic
content

-- A template is a block of HTML that tells Angular how to render the component
in your application. Define a template for your component in one of two ways:
by referencing an external file, or directly within the component.

To define a template within the component, add a template property to the
@Component decorator that contains the HTML you want to use

@Component({
    selector: 'app-component-overview',
    template: '<h1>Hello World"</h1>'
})

Using a template with multiple lines, use backticks(`). For example:
@Component({
  selector: 'app-component-overview',
  template: `
           <h1>Hello World!</h1>
           <p> This template definition spans multiple lines.</p>
  `
})

** An Angular component requires a template defined using template or templateURL
It cannot have both properties in a component.

* Component Lifecycle:

A component instance has a lifecycle that starts when Angular instatiates the component
class and renders the component view along with its child view. The lifecycle continues 
change detection, as Angular checks to see when data-bound properties change, and updates
both the view and the component instance needed. The lifecycle ends when Angular destroys 
the component instance and removes its rendered template from the DOM (Document Object
Model)
Directives have a similar lifecycle, as Angular creates, updates and destroy instances in
the course of execution.


--> Responding to lifecycle events:
Respond to events in the lifecycle of a component or directive by implementing one or more
of the lifecycle hook interfaces in the Angular core library. The hooks give the oppotunity
to act on a component or directive instance at the appropriate moment, as Angular creates,
updates, or destroys that instance.

Each interface defines the prototype for a single hook method, whose name is the interface 
name prefixed with ng. For example, the OnInit interface has a hook method named ngOnInit().
If this method is implemented  in the component or directive class, Angular calls it shortly
after checking the input properties for that component or directive for the first time


* Modules:
An NgModule declares a compilation context for a set of components that is dedicated to an applica-
tion domain, a workflow, or a closely related set of capabilities.
An NgModule can associate its components with related code, such as services, to form functional
units.
Every Angular application has a root module, conventionally named AppModule, which provides the
bootstrap mechanism that launches the application. An application typically contains many funct-
ional modules. 
Organizing the code into distinct functional modules helps in managing development of complex
applications, and in designing for reusability. In addition, this technique lets you take 
advantage of lazy-loading - that is, loading modules on demand - to minimize the amount of 
code that needs to be loaded at startup. 


* Services and dependency injection:
For data or logic that isn't associated with a specific view, and that you want to share across
components, you create a service class. A service class is immediately preceded by the 
@Injectable decorator. The decorator provides the metadata that allows other providers to be injec-
ted as dependencies into your class.

Dependency Injection lets you keep your component classes lean and efficient. They don't fetch
data from the server, validate user inputa, or log directly to the console; they delegate such
tasks to services.


** To display the HeroesComponent, you must add it to the template of the shell AppComponent.
Remember that app-heroes is the element selector for the HeroesComponent. Add an 
<app-heroes> element to the AppComponent template file, just below the title.


--> Users should be able to edit the hero's name in an <input> text box.
The text box should both display the hero's name property and update that 
property as the user types. That means data flows from the component class
out to the screen and from the screen back to the class
To automate that data flow, set up a two-way data binding between the <input>
form element and the hero.name property.


--> Angular needs to know how the pieces of your application fit together and what
other files and libraries the application requires. This is information is called
matadata.

Some of the matadata is in the @Component decorators that has been added to the component
classes. Other critical metadata is in @NgModule decorators.